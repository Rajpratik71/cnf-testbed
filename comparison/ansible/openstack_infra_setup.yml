---
- hosts: all
  pre_tasks:
  - name: re-run setup to discover local variables
    setup:

  - name: Apt update
    apt:
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: Install git
    apt:
      name: git
    when: ansible_os_family == "Debian"

  # - name: Install EPEL Package # disabled due to missing: ninja-build, cmake3
  #   yum:
  #     name: epel-release
  #   when: ansible_os_family == "RedHat"
  
  - name: Install latest EPEL Package
    yum:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      state: present
    when: ansible_os_family == "RedHat"

  - name: Yum update
    yum:
      name: '*'
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  # TODO: move this to tasks and add when clause if possible
  - name: Install centos vpp source build deps
    yum:
      name: ['cmake3', 'ninja-build']
      state: present
    when: ansible_os_family == "RedHat"
  
  - name: Install git
    yum:
      name: git
    when: ansible_os_family == "RedHat"

  - name: Install Vlan Package
    apt:
      name: vlan
    when: ansible_os_family == "Debian"

  - name: Install Vlan Package
    yum:
      name: vconfig
    when: ansible_os_family == "RedHat"

  - name: Check for Mellanox ConnectX inteface
    shell: cat /proc/bus/pci/devices | cut -f1 | grep 5e00
    register: mellanox
    ignore_errors: true

  vars_files:
  - vars/{{ ansible_os_family }}_os_infra.yml
  vars:
    # See os specific vars files
    # arch: ubuntu18.04-x86_64
    # mlnx_ver: 4.4-2.0.7.0
    config_network_bonds: true
    config_network_bridges: false
    config_network_interfaces: true
    enable_configured_interfaces_after_defining: true
    dns_nameservers:
      - "{{ ansible_dns.nameservers[0] }}"
      - "{{ ansible_dns.nameservers[0] }}"
    network_bonds:
      - name: 'bond0'
        configure: true
        method: 'static'
        address: "{{ ansible_bond0.ipv4.address }}"
        netmask: "{{ ansible_bond0.ipv4.netmask }}"
        gateway: "{{ ansible_default_ipv4.gateway }}"
        parameters:
          - param: 'bond-downdelay'
            val: '200'
          - param: 'bond-miimon'
            val: '100'
          - param: 'bond-mode'
            val: '4'
          - param: 'bond-updelay'
            val: '200'
          - param: 'bond-xmit_hash_policy'
            val: 'layer3+4'
          - param: 'bond-lacp-rate'
            val: '1'
        slaves:
          - "{{ ansible_bond0.slaves[0] }}"
      - name: 'bond0:0'
        configure: true
        method: 'static'
        address: "{{ ansible_bond0_0.ipv4.address }}"
        netmask: "{{ ansible_bond0_0.ipv4.netmask }}"
        parameters:
          - param: 'post-up'
            val: "route add -net 10.0.0.0/8 gw {{ ansible_bond0_0.ipv4.network }}"
          - param: 'post-down'
            val: "route del -net 10.0.0.0/8 gw {{ ansible_bond0_0.ipv4.network }}"
    network_interfaces:
      - name: "{{ ansible_bond0.slaves[0] }}"
        configure: true
        method: 'manual'
        parameters:
          - param:
            val: 'bond-master bond0'

  tasks:
  - name: Get Bond0 Slave1 interface
    set_fact:
      vlan_interface: "{{ansible_bond0.slaves[1]}}"
    when: ansible_bond0.slaves[1] is defined

  - name: Get Bond0 Slave1 PCIid
    set_fact:
      vlan_pciid: "{{hostvars[inventory_hostname]['ansible_' + vlan_interface]['pciid']}}"
    when: ansible_bond0.slaves[1] is defined

  - name: Add host and VPP interface to inventory
    delegate_to: localhost
    shell: echo "{{inventory_hostname}} vlan_interface={{vlan_interface}} vlan_pciid={{vlan_pciid}}" >> /ansible/inventory
    when: ansible_bond0.slaves[1] is defined

  roles:
    - role: ntp
    - role: mrlesmithjr.config-interfaces
      when: ansible_os_family == 'Debian'
    - role: packet_vlan_enable
      when: ansible_bond0.slaves[1] is defined
    - role: grub_openstack
    - role: mellanox_src_install
      when: mellanox.rc == 0 and not ansible_distribution_release == 'xenial'
